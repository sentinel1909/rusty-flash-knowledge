//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    pub database: app::configuration::DatabaseConfig,
    pub server: app::configuration::ServerConfig,
}
pub struct ApplicationState {
    pub database_config: app::configuration::DatabaseConfig,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(app_config.database).await)
    }
    async fn _new(v0: app::configuration::DatabaseConfig) -> crate::ApplicationState {
        crate::ApplicationState {
            database_config: v0,
        }
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    app_config: crate::ApplicationConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(app_config).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    domain_router: matchit::Router<u32>,
    domain_0: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self {
            domain_router: Self::domain_router(),
            domain_0: Self::domain_0_router(),
        }
    }
    fn domain_router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("ten/egdelwonk-hsalf-ytsur/ipa", 0u32).unwrap();
        router
    }
    fn domain_0_router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/v1/flashcards", 0u32).unwrap();
        router.insert("/v1/flashcards/{id}", 1u32).unwrap();
        router.insert("/v1/ping", 2u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let host: Option<String> = request
            .headers()
            .get(pavex::http::header::HOST)
            .map(|h| pavex::http::uri::Authority::try_from(h.as_bytes()).ok())
            .flatten()
            .map(|a| {
                a.host().trim_end_matches('.').replace('.', "/").chars().rev().collect()
            });
        if let Some(host) = host {
            if let Ok(m) = self.domain_router.at(host.as_str()) {
                return match m.value {
                    0u32 => self.route_domain_0(request, connection_info, state).await,
                    i => unreachable!("Unknown domain id: {}", i),
                };
            }
        }
        let (request_head, request_body) = request.into_parts();
        #[allow(unused)]
        let request_body = pavex::request::body::RawIncomingBody::from(request_body);
        let request_head: pavex::request::RequestHead = request_head.into();
        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                vec![],
            )
            .into();
        let matched_route_template = pavex::request::path::MatchedPathPattern::new("*");
        route_0::entrypoint(&request_head, matched_route_template, &allowed_methods)
            .await
    }
    async fn route_domain_0(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, request_body) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let request_body = pavex::request::body::RawIncomingBody::from(request_body);
        let Ok(matched_route) = self.domain_0.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_0::entrypoint(
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        };
        let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
            .params
            .into();
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards",
                        );
                        route_2::entrypoint(
                                &request_head,
                                matched_route_template,
                                &state.database_config,
                            )
                            .await
                    }
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards",
                        );
                        route_4::entrypoint(
                                &state.database_config,
                                request_body,
                                matched_route_template,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards",
                        );
                        route_0::entrypoint(
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards/{id}",
                        );
                        route_3::entrypoint(
                                url_params,
                                &request_head,
                                matched_route_template,
                                &state.database_config,
                            )
                            .await
                    }
                    &pavex::http::Method::PUT => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards/{id}",
                        );
                        route_5::entrypoint(
                                &state.database_config,
                                url_params,
                                request_body,
                                matched_route_template,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::DELETE => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards/{id}",
                        );
                        route_6::entrypoint(
                                url_params,
                                &request_head,
                                matched_route_template,
                                &state.database_config,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                                pavex::http::Method::PUT,
                                pavex::http::Method::DELETE,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/flashcards/{id}",
                        );
                        route_0::entrypoint(
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/ping",
                        );
                        route_1::entrypoint(matched_route_template, &request_head).await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/v1/ping",
                        );
                        route_0::entrypoint(
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = crate::route_0::Next0 {
            s_0: v2,
            s_1: v0,
            s_2: v1,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_0::Next1 {
            s_0: &v4,
            s_1: v2,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a pavex::router::AllowedMethods,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0, s_1).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = crate::route_1::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_1::Next1 {
            s_0: &v3,
            next: stage_2,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::ping::get();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        next: fn(
            pavex::request::path::MatchedPathPattern,
            &'a pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a app::configuration::DatabaseConfig,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v3 = crate::route_2::Next0 {
            s_0: v2,
            s_1: v0,
            s_2: v1,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_2::Next1 {
            s_0: &v4,
            s_1: v2,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v1 = app::routes::flashcards::list_flashcards_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::configuration::DatabaseConfig,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a app::configuration::DatabaseConfig,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b app::configuration::DatabaseConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b app::configuration::DatabaseConfig,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c app::configuration::DatabaseConfig,
        s_2: &'d pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0, s_2, s_3, s_1).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v4 = crate::route_3::Next0 {
            s_0: v0,
            s_1: v3,
            s_2: v1,
            s_3: v2,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v2, v4);
        let v6 = crate::route_3::Next1 {
            s_0: &v5,
            s_1: v0,
            s_2: v3,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v3 = pavex::request::path::PathParams::extract(v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v4,
                    );
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        let v5 = app::routes::flashcards::get_flashcard(v2, &v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c app::configuration::DatabaseConfig,
        s_2: &'d pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c app::configuration::DatabaseConfig,
            &'d pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d app::configuration::DatabaseConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'d app::configuration::DatabaseConfig,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a app::configuration::DatabaseConfig,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b app::configuration::DatabaseConfig,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = handler(s_1, s_0, s_2, s_3).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &app::configuration::DatabaseConfig,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_4::Next0 {
            s_0: v3,
            s_1: v1,
            s_2: v0,
            s_3: v2,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: &app::configuration::DatabaseConfig,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_4::Next1 {
            s_0: &v5,
            s_1: v3,
            s_2: v1,
            s_3: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
        v2: pavex::request::body::RawIncomingBody,
        v3: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v4 = <pavex::request::body::BodySizeLimit as core::default::Default>::default();
        let v5 = pavex::request::body::BufferedBody::extract(v0, v2, v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::request::body::JsonBody::extract(v0, &v6);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = app::routes::flashcards::create_flashcard_handler(v3, &v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b app::configuration::DatabaseConfig,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            &'b app::configuration::DatabaseConfig,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c app::configuration::DatabaseConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            &'c app::configuration::DatabaseConfig,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_5 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a app::configuration::DatabaseConfig,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: pavex::request::path::MatchedPathPattern,
        s_4: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d app::configuration::DatabaseConfig,
        s_4: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_3, s_1, s_2, s_4, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = handler(s_1, s_2, s_0, s_3, s_4).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &app::configuration::DatabaseConfig,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::body::RawIncomingBody,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = crate::route_5::Next0 {
            s_0: v4,
            s_1: v1,
            s_2: v2,
            s_3: v0,
            s_4: v3,
            next: stage_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = pavex::middleware::wrap_noop(v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn wrapping_1(
        v0: &app::configuration::DatabaseConfig,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::body::RawIncomingBody,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = pavex::telemetry::ServerRequestId::generate();
        let v6 = app::telemetry::root_span(v4, v3, v5);
        let v7 = crate::route_5::Next1 {
            s_0: &v6,
            s_1: v4,
            s_2: v1,
            s_3: v2,
            s_4: v0,
            next: stage_2,
        };
        let v8 = pavex::middleware::Next::new(v7);
        let v9 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v6);
        let v10 = pavex_tracing::logger(v9, v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::request::body::RawIncomingBody,
        v4: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v5 = <pavex::request::body::BodySizeLimit as core::default::Default>::default();
        let v6 = pavex::request::body::BufferedBody::extract(v0, v3, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v0, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v10,
                    )
                };
            }
        };
        let v10 = pavex::request::path::PathParams::extract(v1);
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v11,
                    );
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v12,
                    )
                };
            }
        };
        let v12 = app::routes::flashcards::update_flashcard(v4, &v9, &v11).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v12)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d app::configuration::DatabaseConfig,
        s_4: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a pavex::request::RequestHead,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::body::RawIncomingBody,
            &'d app::configuration::DatabaseConfig,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e app::configuration::DatabaseConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b pavex::request::RequestHead,
            pavex::request::path::RawPathParams<'c, 'd>,
            pavex::request::body::RawIncomingBody,
            &'e app::configuration::DatabaseConfig,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
pub mod route_6 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c app::configuration::DatabaseConfig,
        s_2: &'d pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0, s_2, s_3, s_1).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v4 = crate::route_6::Next0 {
            s_0: v0,
            s_1: v3,
            s_2: v1,
            s_3: v2,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v2, v4);
        let v6 = crate::route_6::Next1 {
            s_0: &v5,
            s_1: v0,
            s_2: v3,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &app::configuration::DatabaseConfig,
    ) -> pavex::response::Response {
        let v3 = pavex::request::path::PathParams::extract(v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v4,
                    );
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        let v5 = app::routes::flashcards::delete_flashcard(v2, &v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c app::configuration::DatabaseConfig,
        s_2: &'d pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c app::configuration::DatabaseConfig,
            &'d pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d app::configuration::DatabaseConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'d app::configuration::DatabaseConfig,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
